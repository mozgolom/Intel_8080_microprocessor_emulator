<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="view.HelpWindow">
  <grid id="27dc6" binding="rootPanel" layout-manager="GridLayoutManager" row-count="1" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
    <margin top="0" left="0" bottom="0" right="0"/>
    <constraints>
      <xy x="20" y="20" width="500" height="400"/>
    </constraints>
    <properties/>
    <border type="none"/>
    <children>
      <scrollpane id="a1573">
        <constraints>
          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="7" hsize-policy="7" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <component id="5617a" class="javax.swing.JTextArea" binding="helpTextArea">
            <constraints/>
            <properties>
              <background color="-4471297"/>
              <editable value="false"/>
              <lineWrap value="true"/>
              <text value="*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10; * Регистры микропроцессора Intel 8080:&#10;&#10;    * А  – 8-разрядный регистр аккумулятор. Все арифметические и логические операции производятся только между регистром A и &#10;&#9;   другими регистрами или между регистром A и байтом непосредственных данных.&#10;    * B  – 8-разрядный регистр общего назначения. Старший регистр регистровой пары BC.&#10;    * C  – 8-разрядный регистр общего назначения. Младший регистр регистровой пары BC.&#10;    * D  – 8-разрядный регистр общего назначения. Старший регистр регистровой пары DE.&#10;    * E  – 8-разрядный регистр общего назначения. Младший регистр регистровой пары DE.&#10;    * H  – 8-разрядный регистр общего назначения. Старший регистр регистровой пары HL.&#10;    * L  – 8-разрядный регистр общего назначения. Младший регистр регистровой пары HL.&#10;    * PC – счётчик команд, содержит адрес очередной исполняемой команды.&#9;&#10;    * SP – указатель стека. Указатель стека автоматически декрементируется на 2 при записи пары регистров в стек (отдельный 8-разрядный &#10;&#9;   регистр в стек записать нельзя, только парами) и инкрементируется при извлечении регистровой пары из стека.&#10;    * F  – регистр флагов. Непосредственно недоступен программисту, но его в составе регистровой пары PSW можно сохранить в стеке, а потом &#10;&#9;   извлечь в другую регистровую пару, если нужно специально установить или проверить нужные флаги.&#10;&#10;&#10; * Регистровые пары микропроцессора Intel 8080:&#10;&#10;    * BC  – регистровая пара, состоящая из двух 8-разрядных регистров (B – старший регистр, C – младший).&#10;    * DE  – регистровая пара, состоящая из двух 8-разрядных регистров (D – старший регистр, E – младший).&#10;    * HL  – регистровая пара, состоящая из двух 8-разрядных регистров (H – старший регистр, L – младший), используется для &#10;&#9;    косвенно-регистровой адресации 64 Кбайт памяти.&#10;    * PSW – регистровая пара, состоящая из двух 8-разрядных регистров (A (аккумулятор) – старший регистр, F (регистр флагов) – младший).&#10;&#10;&#10; * Флаги состояний микропроцессора Intel 8080:&#10;&#10;    * C – флаг переноса.&#10;    * Z – равенство результата операции нулю.&#10;    * S – знак операции.&#10;    * P – паритет (чётность битов установленных в 1).&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10; * Система команд микропроцессора Intel 8080:&#10;&#10;    * Команды пересылки данных:&#10;&#10;    &#9;- MOV  (r, r)    - пересылка данных между регистрами общего назначения или между регистром и ячейкой памяти.&#10;    &#9;- MVI  (r, b8)   - загрузка константного значения (байта) в регистр общего назначения.&#10;    &#9;- LXI  (rp, b16) - загрузка константного значения (двойного байта) в регистровую пару.&#10;    &#9;- LDA  (b16)     - прямая загрузка значения ячейки памяти в аккумулятор.&#10;    &#9;- LHLD (b16)     - прямая загрузка значений ячеек памяти в пару регистров HL.&#10;    &#9;- STA  (b16)     - прямая запись содержимого регистра А в ячеку памяти.&#10;    &#9;- SHLD (b16)     - прямая запись содержимого пары регистров HL в ячейку памяти.&#10;&#9;- LDAX (B/D)     - косвенная загрузка содержимого ячейки памяти в регистр А через адрес, хранящийся в BC/DE.&#10;&#9;- STAX (B/D)     - косвенная запись содержимого регистра А в ячейку памяти через адрес, хранящийся в BC/DE.&#10;&#9;- XCHG           - обмен значениями между парами регистров HL и DE.&#10;    &#10;    * Арифметические и логические комнанды:&#10;&#10;&#9;- ADD (r)   - сложение [A = (A) + (r)].&#10;    &#9;- ADI (b8)  - сложение с константой [A = (A) + b8].&#10;&#9;- ADC (r)   - сложение с учётом переноса [A = (A) + (r) + (Carry)].&#10;&#9;- ACI (b8)  - сложение с константой с учётом переноса [A = (A) + b8 + (Carry)].&#10;    &#9;- SUB (r)   - вычитание [A = (A) - (r)].&#10;    &#9;- SUI (b8)  - вычитание константы [A = (A) - b8].&#10;&#9;- SBB (r)   - вычитание с учётом переноса [A = (A) - (r) - (Carry)].&#10;&#9;- SBI (b8)  - вычитание константы с учётом переноса [A = (A) - b8 - (Carry)].&#10;    &#9;- INR (r)   - инкремент [r = (r) + 1].&#10;    &#9;- INX (rp)  - инкремент пары регистров [rp = (rp) + 1].&#10;    &#9;- DCR (r)   - декремент [r = (r) - 1]. &#10;    &#9;- DCX (rp)  - декремент пары регистров [rp = (rp) - 1].&#10;    &#9;- DAD (rp)  - сложение пары регистров [HL = (HL) + (rp)].&#10;    &#9;- ANA (r)   - логическое И [A = (A) &amp; (r)].&#10;    &#9;- ANI (b8)  - логическое И с константой [A = (A) &amp; b8].&#10;    &#9;- ORA (r)   - логическое ИЛИ [A = (A) | (r)].&#10;    &#9;- ORI (b8)  - логическое ИЛИ с константой.&#10;    &#9;- XRA (r)   - исключающее ИЛИ [A = (A) ^ (r)].&#10;    &#9;- XRI (b8)  - исключающее ИЛИ с константой [A = (A) ^ b8].&#10;&#9;- CMP (r)   - сравнение с регистром.&#10;&#9;- СPI (b8)  - сравнение с константой.&#10;&#9;- CMA       - инвертирование содержимого регистра А [A = !(A)].&#10;&#9;- STC       - установка флага переноса в 1.&#10;&#9;- CMC       - инвертирование флага переноса.&#10;&#9;- RLC       - циклический сдвиг аккумулятора влево.&#10;    &#9;- RRC       - циклический сдвиг аккумулятора вправо.&#10;&#9;- RAL       - арифметический сдвиг влево через перенос.&#10;&#9;- RAR       - арифметический сдвиг вправо через перенос.&#10;&#10;    * Команды ветвления, управления вводом/выводом и работы со стеком:&#10;&#10;&#9;- PCHL        - переход по адресу из пары регистров HL.&#10;&#9;- SPHL        - загрузка содержимого из пары регистров HL в указатель стека (SP)&#10;&#9;- CALL (adr)* - вызов подпрограммы по адресу.&#10;&#9;- CNZ  (adr)* - вызов подпрограммы по адресу, если флаг Z = 0.&#10;&#9;- CZ   (adr)* - вызов подпрограммы по адресу, если флаг Z = 1.&#10;&#9;- CNC  (adr)* - вызов подпрограммы по адресу, если флаг C = 0.&#10;&#9;- CC   (adr)* - вызов подпрограммы по адресу, если C = 1.&#10;&#9;- CPO  (adr)* - вызов подпрограммы по адресу, если P = 0.&#10;&#9;- CPE  (adr)* - вызов подпрограммы по адресу, если P = 1.&#10;&#9;- CP   (adr)* - вызов подпрограммы по адресу, если S = 0.&#10;&#9;- CM   (adr)* - вызов подпрограммы по адресу, если S = 1.&#10;&#9;- RET         - возврат из подпрограммы.&#10;&#9;- RNZ         - возврат из подпрограммы, если Z = 0.&#10;&#9;- RZ          - возврат из подпрограммы, если Z = 1&#10;&#9;- RNC         - возврат из подпрограммы, если C = 0.&#10;&#9;- RC          - возврат из подпрограммы, если C = 1.&#10;&#9;- RPO         - возврат из подпрограммы, если P = 0.&#10;&#9;- RPE         - возврат из подпрограммы, если P = 1.&#10;&#9;- RP          - возврат из подпрограммы, если S = 0.&#10;&#9;- RM          - возврат из подпрограммы, если S = 1.&#10;    &#9;- JMP  (adr)* - безусловный переход.&#10;    &#9;- JZ   (adr)* - переход, если Z = 1.&#10;    &#9;- JNZ  (adr)* - переход, если Z = 0.&#10;    &#9;- JC   (adr)* - переход, если C = 1.&#10;    &#9;- JNC  (adr)* - переход, если С = 0.&#10;    &#9;- JP   (adr)* - переход, если S = 0.&#10;    &#9;- JM   (adr)* - переход, если S = 1.&#10;    &#9;- JPO  (adr)* - переход, если P = 0.&#10;    &#9;- JPE  (adr)* - переход, если P = 1.&#10;&#9;- PUSH (rp)  - загрузка содержимого пары регистров (BC, DE, HL, PSW) в стек.&#10;&#9;- POP  (rp)  - загрузка содержимого из вершины стека в пару регистров (BC, DE, HL, PSW).&#10;&#9;- XTHL       - обмен между вершиной стека и парой регистров HL.&#10;&#9;- IN   (b8)  - чтение значения из порта в аккумулятор.&#10;&#9;- OUT  (b8)  - запись значения в порт из аккумулятора.&#10;    &#9;- NOP        - нет операции.&#10;    &#9;- HLT        - остановка процессора.&#10;&#10;            (adr)* – в данных командах в тексте программы указывается не абсолютный адрес, а относительная метка. В процессе трансляции &#10;&#9;&#9;     программы все метки переводятся в адреса. Соответствие меток и адресов можно посмотреть в соответствующей таблице &#10;&#9;&#9;     во вкладке &quot;Code Editor&quot;. Пример:&#10;&#9;&#9;&#10;&#9;&#9;MVI A, 0xFF&#10;&#9;&#9;Loop:         ; Объявления метки Loop&#10;&#9;&#9;  DCR A&#10;&#9;&#9;  JNZ Loop    ; Переход на метку Loop, если Z != 1&#10;&#9;&#9;  HLT&#10;&#10;  * Директивы транслятора:&#10;&#10;    * .set:0x(XX)   – директива загрузки в ячейку памяти микропроцессора значения (байта). Используется для формирования в памяти &#10;&#9;&#9;      массива данных.&#10;    * .adr:0x(XXXX) – директива установки адреса. Команды и данные, следующие за этой директивой будут загружены в память начиная &#10;&#9;&#9;      с указанного в директиве адреса.&#10;&#10;&#9;Пример:&#10;&#9;&#10;&#9;.adr:0x0010&#10;&#9;MVI A, 0xFF&#9;; загрузка в ячейки 0x0010 и 0x0011 команды MVI A, 0xFF (2 байта)&#10;&#9;MVI B, 0xCC&#9;; загрузка в ячейки 0x0012 и 0x0013 команды MVI B, 0xCC (2 байта)&#10;&#9;CPI B&#9;&#9;; загрузка в ячейку 0x0014 команды CPI B &#9;&#9; (1 байт)&#10;&#9;HLT&#9;&#9;; загрузка в ячейку 0x0015 команды HLT &#9;&#9;&#9; (1 байт)&#10;&#10;&#9;.adr:0x0F00&#10;&#9;.set:0x0A       ; загрузка в ячейку 0x0F00 данных 0x0A&#10;&#9;.set:0x0B&#9;; загрузка в ячейку 0x0F01 данных 0x0B&#10;&#9;.set:0x0C&#9;; загрузка в ячейку 0x0F02 данных 0x0C&#10;&#10;&#9;Команды в данном примере будут загружены в память микропроцессора начиная с адреса 0x0010.&#10;&#9;Данные в данном примере будут загружены в память микропроцессора начиная с адреса 0x0F00.&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10; * Ввод с клавиатуры:&#10;&#10;    Команда чтения значения из порта 0x08 (IN 0x08) осуществляет запрос на ввод значения с клавиатуры.&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10; * Вывод в консоль:&#10;&#10;    Команда записи значения в порт 0x02 (OUT 0x02) осуществляет вывод значения в консоль.&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10; * Работа с таймером:&#10;&#10;    Эмулятор Intel 8080 поддерживает работу с таймером.&#10;    Установка таймера производится с точностью до 0.01 секунды. &#10;    Максимальное время одного цикла работы таймера составляет 2.55 секунды = 255 * 0.01.&#10;    Обмен информацией с таймером осуществляется через порт 0x16. Запись значения в порт 0x16 (OUT 0x16) выполняет программирование таймера. &#10;    После выполнения этой команды таймер начинает обратный отсчёт (значение таймера декрементируется каждую 0.01 секунды). Чтение значения &#10;    из порта 0x16 (IN 0x16) позволяет получить текущее значение таймера.&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10; * Работа с пиксельным экраном:&#10;&#10;    Эмулятор Intel 8080 позволяет работать с экраном с разрешением 256x256 пикселей.&#10;    Каждый пиксель экрана может отображать 1 из 256 возможных цветов.&#10;    Взаимодействие с экраном осуществляется через порт 0x05.&#10;    &#10;    Протокол обмена информацией:&#10;&#10;      1. Записать в порт 0x05 номер строки пиксельного экрана (0 - 255).&#10;      2. Записать в порт 0x05 номер столбца пиксельного экрана (0 - 255).&#10;      3. Выбрать режим записи/чтения. (0x00 – запись, любое другое значение – чтение).&#10;      4. Записать/прочитать значение цвета выбранного пикселя экрана.&#10;&#10;      Пример установки пикселя с координатами [Row: 10, Column: 15] в синий цвет:&#10;&#10;&#9;MVI A, 0x0A&#9;&#9;; номер строки пикселя&#10;&#9;OUT 0X05&#9;&#9;; запись номера строки&#10;&#9;MVI A, 0X0F&#9;&#9;; номер столбца пикселя&#10;&#9;OUT 0X05&#9;&#9;; запись номера столбца&#10;&#9;MVI A, 0X00&#9;&#9;; загрузка нулевого значения в регистр (режим записи)&#10;&#9;OUT 0X05&#9;&#9;; запись нулевого значения (установка режима записи)&#10;&#9;MVI A, 0b00000111&#9;; загрузка значения цвета пикселя (цвет пикселя кодируется по упрощенной модели RGB: 0bRRGGGBBB)&#10;&#9;OUT 0X05&#9;&#9;; запись значения цвета пикселя&#10;&#10;      Пример чтения значения пикселя с координатами [Row: 10, Column: 15]:&#10;&#10;&#9;MVI A, 0x0A&#9;&#9;; номер строки пикселя&#10;&#9;OUT 0X05&#9;&#9;; запись номера строки&#10;&#9;MVI A, 0X0F&#9;&#9;; номер столбца пикселя&#10;&#9;OUT 0X05&#9;&#9;; запись номера столбца&#10;&#9;MVI A, 0XFF&#9;&#9;; загрузка значения отличного от нуля в регистр (режим чтения)&#10;&#9;OUT 0X05&#9;&#9;; запись значения(установка режима чтения)&#10;&#9;IN 0x05&#9;&#9;&#9;; чтение значения пикселя&#10;&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10;  * Работа с символьным экраном:&#10;&#10;    Эмулятор Intel 8080 позволяет работать с символьным экраном разрешением 20x20 пикселей.&#10;    Каждый пиксель экрана может отображать 1 из 8 цветов (фон) и символ из таблицы ASCII 1251 (1 из 8 цветов).&#10;    Взаимодействие с экраном осуществляется через порт 0x07.&#10;    &#10;    Протокол обмена информацией:&#10;&#10;      1. Записать в порт 0x07 номер строки символьного экрана (0 - 19).&#10;      2. Записать в порт 0x07 номер столбца символьного экрана (0 - 19).&#10;      3. Выбрать режим записи/чтения. (0x00 – запись, любое другое значение – чтение).&#10;      4. Записать/прочитать значение цвета фона и цвета символа выбранного пикселя экрана (цвет фона кодируется по упрощенной модели RGB&#10;&#9; пятым, четвёртым и третьим битами: 0bxxRGBxxx; цвет символа кодируется по упрощенной модели RGB вторым, первым и нулевым битами:&#10;         0bxxxxxRGB). Цвет фона и цвет пикселя передаются одним байтом.&#10;      5. Записать/прочитать значение кода символа выбранного пикселя экрана (Код символа таблицы ASCII 1251).&#10;&#10;&#9;Пример вывода на экран символа '$' в зелёном цвете на синем фоне в пикселе с координатами [Row: 1, Column: 3]:&#10;&#10;&#9;MVI A, 0x01&#9;&#9;; номер строки пикселя&#10;&#9;OUT 0x07&#9;&#9;; запись номера строки&#10;&#9;MVI A, 0x03&#9;&#9;; номер столбца пикселя&#10;&#9;OUT 0x07&#9;&#9;; запись номера столбца&#10;&#9;MVI A, 0x00&#9;&#9;; загрузка нулевого значения в регистр (режим записи)&#10;&#9;OUT 0x07&#9;&#9;; запись нулевого значения в экран (установка режима записи)&#10;&#9;MVI A, 0b00001010&#9;; загрузка кода цвета фона (0bxx001xxx - синий) и цвета символа (0bxxxxx010 - зелёный).&#10;&#9;OUT 0x07&#9;&#9;; запись значения цвета фона и цвета символа&#10;&#9;MVI A, 0x24&#9;&#9;; загрузка кода символа '$' согласно таблицы ASCII 1251&#10;&#9;OUT 0x07&#9;&#9;; запись значения кода символа&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/&#10;&#10;  * Установка точек остановки:&#10;&#10;    Для установки точки остановки необходимо кликнуть ПКМ по нужному адресу в таблице памяти микропроцессора во вкладке &quot;Intel 8080&quot;.&#10;    Для удаления точки остановки необходимо повторно кликнуть ПКМ по существующей точке остановки.&#10;&#10;  * Установка значения счётчика команд (PC):&#10;&#9;&#10;    Для установки значения счётчика команд необходимо кликнуть ЛКМ по нужному адресу в таблице памяти микропроцессора.&#10;&#10;&#10;*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/" noi18n="true"/>
              <wrapStyleWord value="true"/>
            </properties>
          </component>
        </children>
      </scrollpane>
    </children>
  </grid>
</form>
